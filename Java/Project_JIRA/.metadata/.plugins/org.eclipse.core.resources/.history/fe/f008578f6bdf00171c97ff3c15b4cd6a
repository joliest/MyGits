package com.tracker.DatabaseHelper;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.servlet.http.HttpServletRequest;
import com.tracker.Module;
import com.tracker.Template.model.Template;

public class TemplateDatabaseManager extends DatabaseManager{
	
	private int id;
	private int parentTemplate;
	private String name;
	
	private final String countRows = "SELECT * FROM TEMPLATE ORDER BY ID DESC";
	private final String addTemplate = "INSERT INTO TEMPLATE VALUES(?,?)";
	private final String addTemplateAttribute = "INSERT INTO TEMPLATE_ATTRIB VALUES(?,?,?)";

	public TemplateDatabaseManager(Module module) {
		super(module);
		Template template = (Template) module;
		name = template.getName();
		id = generateId();
		//parentTemplate = template.getParentTemplate();
	}
	
	public TemplateDatabaseManager(HttpServletRequest request) {
		super(request);
	}

	@Override
	public void add() {
		try {
			preparedStatement = connection.prepareStatement(addTemplate);
			preparedStatement.setInt(1, id);
			preparedStatement.setString(2, name);
			preparedStatement.executeQuery();
			System.out.println("Successfully added " + name + " in TEMPLATE table");
		} catch(SQLException sEx) {
			System.out.println("TemplateDatabaseManager.add() : " + sEx);
		}
	}
	
	public void addTemplateAttributes(int templateId, ArrayList<String> attributes) {
		ArrayList<String> filteredAttributeList = removeDuplicate(templateId, attributes);
		String defaultValue = "";

		for(int i = 0; i < filteredAttributeList.size(); i++) {
			int attributeId = Integer.parseInt(filteredAttributeList.get(i));
			try {
				preparedStatement = connection.prepareStatement(addTemplateAttribute);
				preparedStatement.setInt(1, templateId);
				preparedStatement.setInt(2, attributeId);
				preparedStatement.setString(3, defaultValue);
				preparedStatement.executeQuery();
				System.out.println("Successfully added attributeId " + attributeId + " in templateId " + templateId);
			} catch(SQLException sEx) {
				System.out.println("TemplateDatabaseManager.addTemplateAttributes() : " + sEx);
			}
		}
	}
	
	//removes selected attributes that are already existing in the template
	public ArrayList<String> removeDuplicate(int id, ArrayList<String> attributes) {
		ArrayList<String> attributeList = new ArrayList<String>();
		String query = "SELECT * FROM TEMPLATE_ATTRIB WHERE TEMPLATE_ID = "  + id;
		
		try {
			ArrayList<String> tableRows = new ArrayList<String>();
			statement = connection.createStatement();
			rowCount = statement.executeQuery(query);
			while(rowCount.next()) {
				int row = Integer.parseInt(rowCount.getInt(2));
				tableRows.add();
			}
		} catch(SQLException sEx) {
			System.out.println("TemplateDatabaseManager.removeDuplicate() : " + sEx);
		}
		/*
		try {			
			statement = connection.createStatement();
			rowCount = statement.executeQuery(query);
			//loop thru the existing attributes in the template
			while(rowCount.next()) {
				//loop thru the list of attribute selected by the user
				int tableRow = rowCount.getInt(1);
				System.out.println("Table row value " + tableRow);
				for(int i = 0; i < attributes.size(); i++) {
					int attributeId = Integer.parseInt(attributes.get(i));
					//check if this attributeId is already in the TEMPLATE_ATTRIB table
					if(tableRow == attributeId) {
						System.out.println(tableRow + " is not equal to attribute " + attributeId);
						attributeList.add(attributes.get(i));
					}
				}
			}
			
		} catch(SQLException sEx) {
			System.out.println("TemplateDatabaseManager.removeDuplicate() : " + sEx);
		}
		*/
		return attributeList;
	}

	@Override
	public String remove(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void view() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public HashMap<Integer, String> listGroups() {
		HashMap<Integer, String> list = new HashMap<Integer, String>();
		try {
			statement = connection.createStatement();
			rowCount = statement.executeQuery(countRows);
			while(rowCount.next()) {
				int key = rowCount.getInt(1);
				String value = rowCount.getString(2);
				list.put(key, value);
				System.out.println("List successfully created");
			}
			
		} catch(SQLException sEx) {
			System.out.println("TemplateDatabaseManager.listGroups() : " + sEx);
		}
		return list;
	}

	@Override
	public HashMap<Integer, String> getMembersByGroupId(int groupId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected int generateId() {
		try {
			statement = connection.createStatement();			
			rowCount = statement.executeQuery(countRows);
			rowCount.next();			
			id = (rowCount.getInt(1)) + 1;	
			System.out.println("AttributeDatabaseManager.generateId() value is " + id);
		}  catch (SQLException sEx) {
			System.out.println("AttributeDatabaseManager.generateId() : " + sEx);
		}
		return id;
	}

}
